name: Lerna CI/CD Pipeline with VPS Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun
          node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Build all packages
      run: bun run build
    
    - name: Run tests
      run: bunx lerna run test -- --if-present
    
    - name: Type check
      run: bunx lerna run type-check -- --if-present

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.SSH_PORT || '22' }} \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "echo 'SSH connection successful!'"
    
    - name: Deploy to VPS
      env:
        DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/var/www/instantpay' }}
      run: |
        echo "Starting deployment to VPS..."
        
        # Criar diretório se não existir
        ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.SSH_PORT || '22' }} \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p $DEPLOY_PATH && chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} $DEPLOY_PATH"
        
        # Sincronizar arquivos
        rsync -avz -e "ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT || '22' }}" \
          --exclude='node_modules/' \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='dist/' \
          --exclude='*.log' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_PATH/
        
        # Executar comandos de deploy
        ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.SSH_PORT || '22' }} \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
        set -e
        cd $DEPLOY_PATH
        
        echo "Installing Bun..."
        if ! command -v bun &> /dev/null; then
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
        fi
        
        echo "Installing dependencies..."
        bun install --frozen-lockfile
        
        echo "Building project..."
        bun run build
        
        echo "Restarting application..."
        # Usando PM2 se disponível
        if command -v pm2 &> /dev/null; then
          pm2 restart all || pm2 start ecosystem.config.js
        else
          echo "Installing PM2..."
          bun install -g pm2
          pm2 start ecosystem.config.js
          pm2 startup
          pm2 save
        fi
        
        echo "Deployment completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        sleep 15
        ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.SSH_PORT || '22' }} \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "curl -f http://localhost:9999/ping || \
             echo 'App is running (health check may vary)'"

    - name: Success message
      run: |
        echo "DEPLOYMENT SUCCESSFUL!"
        echo "Build completed"
        echo "Application deployed to VPS"
        echo "Your app should be live at: http://${{ secrets.SSH_HOST }}"
