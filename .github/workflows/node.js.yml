name: Lerna CI/CD Pipeline with VPS Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun
          node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Build all packages
      run: bun run build
    
    #- name: Type check
      #run: bunx lerna run type-check --if-present

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
    
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "echo 'SSH connection successful!'"
    
    - name: Deploy via Git Pull
      env:
        DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/opt/InstantPay' }}
      run: |
        echo "Deploying via git pull..."
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "cd $DEPLOY_PATH && git pull origin main"
    
    - name: Install dependencies and build
      env:
        DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/opt/InstantPay' }}
      run: |
        echo "Installing dependencies and building..."
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "cd $DEPLOY_PATH && ~/.bun/bin/bun install --frozen-lockfile"
        
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "cd $DEPLOY_PATH && ~/.bun/bin/bun run build"
    
    - name: Setup PM2 and restart application
      env:
        DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/opt/InstantPay' }}
        PM2_APP_NAME: ${{ secrets.VPS_PM2_APP_NAME || 'instantpay' }}
      run: |
        echo "Setting up PM2 and restarting application..."
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "cd $DEPLOY_PATH && pm2 restart $PM2_APP_NAME || pm2 start ecosystem.config.js --name $PM2_APP_NAME"
        
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "pm2 startup && pm2 save"

    - name: Verify deployment
      env:
        DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/opt/InstantPay' }}
      run: |
        echo "Verifying deployment..."
        sleep 15
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "pm2 status"
        
        ssh -i ~/.ssh/deploy_key \
            -p $SSH_PORT \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST \
            "curl -f http://localhost:9999/ping || echo 'Health check endpoint may not be available yet'"

    - name: Success message
      run: |
        echo "DEPLOYMENT SUCCESSFUL!"
        echo "Build completed"
        echo "Application deployed to VPS"
        echo "Your app should be live at: http://$SSH_HOST"
